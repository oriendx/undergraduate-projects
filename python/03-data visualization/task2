#%%
try1=100 #此时变量try1是一个整数
try2=float(try1)
print('try的浮点数为:',try2)#在整数前面加上float，整数就会变成浮点数（多了小数点后面的一位）
try3=round(try2)
print('try的整数为:',try3)#在浮点数前面加上round，就会重新变成整数
try4=str(try3)
print('try的字符串为:',try4)#在变量前面加上str，变量就会变成字符串
#小测试：请将a分别转化为字符串、整数、浮点数
test1=1099.33
print(str(test1))
print(round(test1))
print(float(test1))

#接下来介绍列表，列表顾名思义，就是由数据组成的列，例如
#%%
a1=[1,2,3,4,5]#这就是一个基本的列表，在python中，列表由方括号表示
a2=['jobready',2,3,'JR Digital',1.1]#列表可以包含字符串、整数、浮点数
a3=[[1,2,3],'jobready',3,2]#列表中也可以包含列表（层层嵌套）
a4=[1,1,1,2,2,2]#列表中可以有重复元素
#python中列表有一个非常重要和有用的性质就是能调用元素
#例如，我想看列表a4第二个元素是多少，我需要
print('a4为:',a4)
print('a4的第一个数是:'a4[0],'a4的第二个数是:'a4[1]') #注意python等编程语言计数都是从0开始的，因此第一个数就是[0]，第二个数就是[1]
#如果想要看列表a4的最后一个元素是多少，我需要
print('a4的最后一个数是:'a4[-1],a4[len(a4)-1])#len(a4)是指这个列表的长度

#下面介绍元组，培训部分已经说明了元组与列表区别
#%%
b1=(1,2,3)
print('b为:',b1)
#元组与列表的互换
b2=tuple(b1)#在列表前加tuple，列表就会变成元组；在元组前加list，元组就会变成列表
print('b的元组形式为:',b2)
b3=list(b2)
print('b的列表形式为:',b3)

#接下来介绍几个简单的python语句，首先是for循环，用于做重复性操作
#%%
for i in [1,2,3,4]:
    j=i+2
    print('j的值为',j)
#简单的for 循环示例
#小测试：请你利用for循环，将1-5之间的整数都扩大10倍
test2=[1,2,3,4,5]
print(newlist=[i*10 for i in test2])


#while循环与if循环
#%%
#c1=500
#while c1>100:
    #print('c1大于100')
#此时点击运行后Python会重复输出‘c1大于100’的语句，记得及时暂停，while语句会一直重复进行指令
c2=300
if c2>100:
    print('c1大于100')
#if语句与while类似，但只会报出一次'c1大于100'的指令

#当然很多时候，我们需要用到for循环与if预语句并用的情况
#举一个例子，你想知道列表w中有哪些元素大于10，则：
#%%
w=[3,7,13,15,19,0,-5,7]
for i in w:
    if i >10:
        print('i的值为:',i)
        print('该数大于10')
    else:
        print('i的值为:',i)
        print('该数小于等于10')

#最后，我们来做一道思考题，编程入门中一道非常经典的题目——冒泡排序算法
#冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。
# 走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
# 这个算法的名字由来是因为越小的元素会经由交换慢慢"浮"到数列的顶端。
# 示例：
#%%
    arr1 = [64, 34, 25, 12, 22, 11, 90]
    n = len(arr1)
    # 具体的原理就是嵌套两层循环，每一轮通过相邻的数两两之间比较，最终把最大的数放在最后，然后进行下一轮；
    # 下一轮会忽略掉上一轮放到最后的数（最大值），重复上一轮的操作，把第二大的值放在最后；
    # 如此循环操作，最终这个列表就会变成由小到大顺序的新列表
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr1[j] > arr1[j + 1]:
                arr1[j], arr1[j + 1] = arr1[j + 1], arr1[j]
print('arr1排序后为:',arr1)
#（思考题）下面，请你利用冒泡排序，对arr2进行由打到小的排序
arr2=[32,41,13,7,9,10,21]
for i in range(1,len(arr2)):
    for j in range(0, len(arr2) - i):
if arr2[j] > arr2[j + 1]:
    arr2[j], arr2[j + 1] = arr2[j + 1], arr2[j]
    return arr2
